package org.mal_lang.enterpriselang.test;

import core.Attacker;
import org.junit.jupiter.api.Test;

public class TestExploitationForPrivilegeEscalation extends EnterpriseLangTest {

    private static class exploitationForPrivilegeEscalation {
        public final UserAccount userAccount = new UserAccount("userAccount");
        public final AdminAccount adminAccount = new AdminAccount("adminAccount");
        public final Service service = new Service("service");
        public final OS os = new OS("os");
    }

    @Test
    public void userRights(){
        var model = new exploitationForPrivilegeEscalation();

        Attacker attacker = new Attacker();
        attacker.addAttackPoint(model.userAccount.userRights);
        attacker.attack();

        model.userAccount.userRights.assertCompromisedInstantaneously();
    }

    @Test
    public void adminRights(){
        var model = new exploitationForPrivilegeEscalation();

        Attacker attacker = new Attacker();
        attacker.addAttackPoint(model.adminAccount.adminRights);
        attacker.attack();

        model.adminAccount.adminRights.assertCompromisedInstantaneously();
    }

    @Test
    public void exploitationForPrivilegeEscalation(){
        var model = new exploitationForPrivilegeEscalation();

        Attacker attacker = new Attacker();
        attacker.addAttackPoint(model.service.exploitationForPrivilegeEscalation);
        attacker.attack();

        model.service.attemptExploitationForCredentialAccess.assertCompromisedInstantaneously();
        model.service.exploitationForCredentialAccess.assertCompromisedInstantaneously();
        model.service.exploitationOfNTLMAuthentication.assertCompromisedInstantaneously();
        model.service.attemptExploitationForPrivilegeEscalation.assertCompromisedInstantaneously();
        model.service.attemptExploitationForPrivilegeEscalation.assertCompromisedInstantaneously();
        model.service.exploitationForPrivilegeEscalation.assertCompromisedInstantaneously();
    }
}